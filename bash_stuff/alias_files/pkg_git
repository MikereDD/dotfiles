#!/usr/bin/env bash
#
# . ~/.bash_stuff/alias_files/pkgman_git
#

# Slackware Tools
#############
#alias pkgtool="sudo /sbin/pkgtool "
#alias slaptget="sudo /usr/sbin/slapt-get "
#alias makepkg="sudo /sbin/makepkg "
#alias installpkg="sudo /sbin/installpkg "
#alias removepkg="sudo /sbin/removepkg "
#alias explodepkg="sudo /sbin/explodepkg "
#alias upgradepkg="sudo /sbin/upgradepkg "
#alias slackbuild
#alias buildinstall="chmod a+x *.SlackBuild ;sudo ./*.SlackBuild;installpkg /tmp/*.tgz;sudo rm /tmp/*.tgz"

# Backup and use reflector to create a new mirror list
alias newmirrorlist='CNTY="United States" && sudo mv /etc/pacman.d/mirrorlist.$(date +'%d-%m-%Y').bak && sudo reflector -l 5 -c "$CNTY" --sort rate --save /etc/pacman.d/mirrorlist'

# backup installed pkglist
alias bkuppkglst="comm -23 <(pacman -Qeq|sort) <(pacman -Qmq|sort) > ~/documents/_backups/list/pkglist-$(date +%Y%d%m).txt"
# re-install apps from list
alias freshreinstall='pacman -S $(< ~/documents/_backups/list/pkglist.txt)'

# ABS PKGBUILD aliases
alias mkpkgg="makepkg -g "
alias mkpkg="makepkg -cfs "
alias mkpkgi="makepkg -cfsi "
alias mkpkgsign="makepkg --sign --key $(awk '{ print $0 }' ~/.config/keys/gpg_pkg.txt) -cfs"

# local repo
alias genrepo="repo-add /mnt/b/builddirs/abs/_local_repo/x86_64/seraphiel.repo.db.tar.gz /mnt/b/builddirs/abs/_local_repo/x86_64/*.pkg.tar.xz"
alias genreposign="repo-add -s -k $(awk '{ print $0 }') /mnt/b/builddirs/abs/_local_repo/x86_64/seraphiel.db.tar.gz /mnt/b/builddirs/abs/_local_repo/x86_64/*.pkg.tar.xz"
alias addpkgrepo="repo-add /mnt/b/builddirs/abs/_local_repo/x86_64/seraphiel.repo.db.tar.gz /mnt/b/builddirs/abs/_local_repo/x86_64/$1"
alias addpkgreposign="repo-add -s -k $(awk '{ print $0 }') /mnt/b/builddirs/abs/_local_repo/x86_64/seraphiel.db.tar.gz /mnt/b/builddirs/abs/_local_repo/x86_64/$1"

# Pacman
# List updates
alias pm='PACMAN=/usr/bin/pacman; [ -f /usr/bin/pacman-color ] && PACMAN=/usr/bin/pacman-color; $PACMAN $@'
alias listupdates="sh ~/scripts/updates/list_archupdates.sh"
alias asortpkg="LC_ALL=C pacman -Qi | sed -n '/^Name[^:]*: \(.*\)/{s//\1 /;x};/^Installed[^:]*: \(.*\)/{s//\1/;H;x;s/\n//;p}' | sort -nk2"
alias alpkg='comm -23 <(pacman -Qeq) <(pacman -Qmq)'
alias rmpacmandblck="sudo rm /var/lib/pacman/db.lck"
alias ${pm}Syu="sudo pacman -Syu"
alias ${pm}Sy="sudo pacman -Sy"
alias ${pm}Syy="sudo pacman -Syy"
alias ${pm}S="sudo pacman -S"
alias ${pm}R="sudo pacman -R"
alias ${pm}Rd="sudo pacman -Rd"
alias ${pm}U="sudo pacman -U"
alias ${pm}Si="pacman -Si"
alias ${pm}Qi="pacman -Qi"
alias ${pm}Qs="pacman -Qs"
alias ${pm}Qe="pacman -Qe"
alias ${pm}Sl="sudo pacman -Sl"
alias ${pm}Sw="sudo pacman -Sw"
alias ${pm}Qqm="pacman -Qqm"
alias ${pm}Qdt="pacman -Qdt"
alias ${pm}Qo="pacman -Qo"
alias ${pm}Ql="pacman -Ql"
alias ${pm}Sc="pacman -Sc"
alias mpfci="makepkg -fci"
#alias pacai=`echo -e $(sudo pacman -Sy $(pacman -Sy $@|head -1|cut -f2 -d "/"|awk '{print $1}'))`
##
alias ${pm}AI="pacmanappinstaller"
pacmanappinstaller() {
    echo -e "Preparing to install $(pacman -Ss "$@" | head -1 | cut -f2 -d '/' | awk '{print $1}')" \
     -e "sudo pacman -Sy $(pacman -Ss "$@" | head -1 | cut -f2 -d '/' | awk '{print $1}')" \
     -e "Your requested app $(pacman -Ss "$@" | head -1 | cut -f2 -d '/' | awk '{print $1}') ... is now installed.." \
     -e "Enjoy.. remember you can always uninstall it.."
}
# colorized pacman output with pacs alias:
alias ${pm}find="pacmansearch"
pacmansearch() {
   echo -e "$(pacman -Ss "$@" | sed \
     -e 's#^installed/.*#\\033[1;31m&\\033[0;37m#g' \
     -e 's#^core/.*#\\033[1;31m&\\033[0;37m#g' \
     -e 's#^extra/.*#\\033[0;32m&\\033[0;37m#g' \
     -e 's#^community/.*#\\033[1;35m&\\033[0;37m#g' \
     -e 's#^.*/.* [0-9].*#\\033[0;36m&\\033[0;37m#g' ) \
     \033[0m"
}

pmcl() {
    repoz=`grep -v '^\[options\]' /etc/pacman.conf | grep '^\[.*\]' | sed -e 's/^\[\([^]]*\)\]$/\1/g'`
    repo=''
    if [[ -z $1 ]]; then
        echo -e "invalid parameter: use a repo or 'all' for all\nrepos available:"
        for rep in $repoz; do  echo -n "  ${rep}";  done
        echo ""
        return
    elif [[ $1 != 'all' ]]; then repo=$1; fi

    local CL='\\e[';  local RS='\\e[0;0m'

    echo -e "$(pacman -Sl ${repo} | sed "
    /\[installed\]$/s,.*,${CL}0;33m&${RS},
    ")"
}

# Yaourt aliases
alias yS="yaourt -S"        # Sync
alias ySy="yaourt -Sy"      # Refesh, Resync
alias ySyua="yaourt -Syua"  # Sync database, upgrade packages, search the AUR
alias ySb="yaourt -Sb"      # build and export package, its sources to a directory: yaourt -Sb --export <dir> <package>
alias yR="yaourt -R"        # remove pkg
alias yRd="yaourt -Rd"      # remove pkg and deps+check
alias ySi="yaourt -Si"      # search regex with info
alias yQi="yaourt -Qi"      # view package information (-ii for backup files)
alias yQe="yaourt -Qe"      # list packages explicitly installed [filter]
alias yG="yaourt -G"        # fetch pkg
alias yB="yaourt -B"        # backup database

#alias yaourtai="yaourt -Sy $(yaourt -Ss $@|head -1|cut -f2 -d "/"|awk '{print $1}')"
# colorized pacman output with pacs alias:
alias yai="yaourtappinstaller"
yaourtappinstaller() {
    echo -e "Preparing to install $(yaourt -Ss "$@" | head -1 | cut -f2 -d '/' | awk '{print $1}')" \
    -e "yaourt -Sy $(yaourt -Ss "$@" | head -1 | cut -f2 -d '/' | awk '{print $1}')" \
    -e "Your requested app $(yaourt -Ss "$@" | head -1 | cut -f2 -d '/' | awk '{print $1}') ... is now installed.." \
    -e "Enjoy.. remember you can always uninstall it.."
}
alias yfind="yaourtsearch"
yaourtsearch() {
   echo -e "$(yaourt -Ss "$@" | sed \
     -e 's#^installed/.*#\\033[1;31m&\\033[0;37m#g' \
     -e 's#^core/.*#\\033[1;31m&\\033[0;37m#g' \
     -e 's#^extra/.*#\\033[0;32m&\\033[0;37m#g' \
     -e 's#^community/.*#\\033[1;35m&\\033[0;37m#g' \
     -e 's#^.*/.* [0-9].*#\\033[0;36m&\\033[0;37m#g' ) \
     \033[0m"
}

# Git Aliases
## MOVED TO GITCONFIG ##
alias g="git"
alias gbav="git branch -a -v"
alias gba="git branch -a"
alias gbl="git branch -l"
alias gbr="git branch -r"
alias gs="git status"
alias gdiff="git diff"
alias gadd="git add "
alias gca="git commit -a"
alias gpo="git push origin "
alias gco="git checkout "
alias gclo="git clone "
alias gp="git pull "
alias gm="git merge"
alias gcb="git-create-branch"
alias grv="git remote -v"
alias gaups="git remote add upstream"
alias gfups="git fetch upstream"
alias gbva="git branch -va"
alias gmupsjb="git merge upstream/jb"
alias gmupsjb-mr1="git merge upstream/jb-mr1"
alias gmupsm="git merge upstream/master"

# mergetool vimdiff
alias vimdiffmerge="git mergetool -t vimdiff"
###################################

# gco      => git checkout master
# gcb bugs => git checkout bugs
function gco {
  if [ -z "$1" ]; then
      git checkout master
  else
      git checkout $1
  fi
}

ghclone ()
{
    gh_url=${1:-`pbpaste`};
    co_dir=${HOME}/Code/sources/$(echo $gh_url | sed -e 's/^git:\/\/github.com\///; s/\//-/; s/\.git$//');
    if [ -d $co_dir ]; then
        cd $co_dir && git pull origin master;
    else
        git clone "${gh_url}" "${co_dir}" && cd "${co_dir}";
    fi
}

# Repo
alias repo="~/bin/repo"
